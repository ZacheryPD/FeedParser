* Background
** What is RSS?
   RSS stands for Really Simple Syndication and it is an open standard for
   reading news on the web.  In essence, it is a standardized format that
   web sites can use to publish their content so that people can write apps to
   read them.  That is exactly the aim of this project.

*** RSS Specification
    Information about the RSS spec can be found [[http://www.rssboard.org/rss-specification][here]].

** Unit Testing
   I have opted to unit test and keep all the code in this one org file for now.
   I will probably look into changing that in the future.  

   The testing is done using the default 'unittest' library in python3+.  In
   order to take the most advantage of the literate programming style, I have
   opted to separate out each use case into its own code block and attempt to
   document them as I go.  I am unsure if that is going to make the code file
   massive and incomprehensible, or make the tangling process too difficult to
   manage, but I think most of it will be somewhat set-and-forget.
* Basic types
** Article Type
   The basic unit of the RSS feed is the article. The article consists of a
   description, URL, title, and a date. This is passed around inside of feed
   objects.
   #+BEGIN_SRC python :tangle SimpleRSS.py
     class Article:
         def __init__(self):
             self.description = ""
             self.url = ""
             self.title = ""
             self.published_date = ""

         def __str__(self):
             return "title: {}\n\tdescription: {}\n\tlink: {}\n\tpublished_date: {}".format(self.title, self.description, self.url, self.published_date)
   #+END_SRC
** Image type
   The image type is the XML object that contains the feed's favicon URL & title.
   #+BEGIN_SRC python :tangle SimpleRSS.py
     class Image:
        def __init__(self):
           self.title = ""
           self.url = ""
           self.link = ""
   #+END_SRC
** Feed type
   The feed type is the thing that will be parsed out of an XML document overall. It consists of articles, etc

   #+BEGIN_SRC python :tangle SimpleRSS.py
     class Feed:
         def __init__(self):
             self.image = Image()
             self.articles = []

             self.link = ""
             self.last_build_date = ""
             self.title = ""

         def __str__(self):
             return "{} \n\t- link:{}\n\t- last_build_date: {}\n\t- {} article(s)".format(self.title, self.link, self.last_build_date, len(self.articles))
   #+END_SRC
* Parsers
  This RSS parser is designed to be a parser for RSS feeds, but I do also intend
  to use it for some other feed types (atom, etc) in the future. To make that
  easier, I am interested in setting things up in a way that I can reuse easily,
  and I think the right way to do that for right now is to use something like a
  strategy pattern where every parser knows how to resolve some part of the
  feed. In the future, it may be worthwhile to make the parsers here strategies
  in a true strategy pattern and have the system somehow intelligently determine
  what kind of a feed we are dealing with.
** Article parser 
   In the RSS specification, articles are called "items" [[http://www.rssboard.org/rss-specification#hrelementsOfLtitemgt][source]].
   #+BEGIN_SRC python :tangle SimpleRSS.py
     class ArticleParser:
         def parse(self, xml_doc):
             article = Article()

             article.description = xml_doc.find("description").text
             article.title = xml_doc.find("title").text
             article.url = xml_doc.find("link").text
             article.published_date = xml_doc.find("pubDate").text

             return article
   #+END_SRC
*** Unit Tests
    I have opted to write a separate test case for each object, and to write
    individual functions for each "test case".  We use the ElementTree library
    to parse, our XML object, so our tests need a reference to create the
    'xml_doc' which we can use.

    #+BEGIN_SRC python :tangle SimpleRSSTests.py :noweb yes
      import unittest
      import xml.etree.ElementTree as ET

      from SimpleRSS import ArticleParser

      class TestArticleParsing(unittest.TestCase):
          <<description-test>>
    #+END_SRC 
**** Description
     Every RSS article should have a description of some form or fashion.  This
     is required in the spec mentioned in section [[*Unit Tests][Unit Tests]].
    #+BEGIN_SRC python :noexport :noweb-ref description-test
      def test_description_exists(self):
          xml_string = """"""
          xml_document = ET.fromstring(xml_string)

          article_parser = ArticleParser()

          article = article_parser.parse(xml_document)

          self.assertIsNotNone(article.description)




    #+END_SRC 
** Image Parser
   #+BEGIN_SRC python :tangle SimpleRSS.py
     class ImageParser:
         def parse(self, xml_doc):
             image = Image()

             image.title = xml_doc.find('title').text
             image.url = xml_doc.find('url').text
             image.link = xml_doc.find('link').text

             return image
   #+END_SRC
** Feed Parser
   #+BEGIN_SRC python :tangle SimpleRSS.py
    class FeedParser:
        def __init__(self, ):
            self.image_parser = ImageParser()
            self.article_parser = ArticleParser()


        def parse(self, xml_doc):
            feed = Feed()

            feed.image = self.image_parser.parse(xml_doc.find('image'))
            feed.articles = [self.article_parser.parse(article_doc) for article_doc in xml_doc.findall('item')]

            feed.link = xml_doc.find('link').text
            feed.last_build_date = xml_doc.find('lastBuildDate').text
            feed.title = xml_doc.find('title').text

            return feed
   #+END_SRC 

** Cleanup
   Below are the final things we have to add to files to get them to tangle
   properly.  Things like calling main() methods, etc.  
*** Unit testing cleanup
    In order to get unit tests running when you run a file, I need to get the
    main method to be called.

    #+BEGIN_SRC python :tangle SimpleRSSTests.py
     if __name__ == '__main__':
         unittest.main()

    #+END_SRC 

    #  LocalWords:  unittest org
